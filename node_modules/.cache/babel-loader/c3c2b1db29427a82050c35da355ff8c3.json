{"ast":null,"code":"import _objectSpread from\"/data/gitter-search-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from\"react\";import AppSearchAPIConnector from\"@elastic/search-ui-app-search-connector\";import{ErrorBoundary,Facet,SearchProvider,SearchBox,Results,PagingInfo,ResultsPerPage,Paging,Sorting,WithSearch}from\"@elastic/react-search-ui\";import{Layout}from\"@elastic/react-search-ui-views\";import\"@elastic/react-search-ui-views/lib/styles/styles.css\";import{buildAutocompleteQueryConfig,buildFacetConfigFromConfig,buildSearchOptionsFromConfig,buildSortOptionsFromConfig,getConfig,getFacetFields}from\"./config/config-helper\";const _getConfig=getConfig(),hostIdentifier=_getConfig.hostIdentifier,searchKey=_getConfig.searchKey,endpointBase=_getConfig.endpointBase,engineName=_getConfig.engineName;const connector=new AppSearchAPIConnector({searchKey,engineName,hostIdentifier,endpointBase});const config={searchQuery:_objectSpread({facets:buildFacetConfigFromConfig()},buildSearchOptionsFromConfig()),autocompleteQuery:buildAutocompleteQueryConfig(),apiConnector:connector,alwaysSearchOnInitialLoad:true};export default function App(){return/*#__PURE__*/React.createElement(SearchProvider,{config:config},/*#__PURE__*/React.createElement(WithSearch,{mapContextToProps:({wasSearched})=>({wasSearched})},({wasSearched})=>{return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(ErrorBoundary,null,/*#__PURE__*/React.createElement(Layout,{header:/*#__PURE__*/React.createElement(SearchBox,{autocompleteSuggestions:true}),sideContent:/*#__PURE__*/React.createElement(\"div\",null,wasSearched&&/*#__PURE__*/React.createElement(Sorting,{label:\"Sort by\",sortOptions:buildSortOptionsFromConfig()}),getFacetFields().map(field=>/*#__PURE__*/React.createElement(Facet,{key:field,field:field,label:field}))),bodyContent:/*#__PURE__*/React.createElement(Results,{titleField:getConfig().titleField,urlField:getConfig().urlField,shouldTrackClickThrough:true}),bodyHeader:/*#__PURE__*/React.createElement(React.Fragment,null,wasSearched&&/*#__PURE__*/React.createElement(PagingInfo,null),wasSearched&&/*#__PURE__*/React.createElement(ResultsPerPage,null)),bodyFooter:/*#__PURE__*/React.createElement(Paging,null)})));}));}","map":{"version":3,"sources":["/data/gitter-search-frontend/src/App.js"],"names":["React","AppSearchAPIConnector","ErrorBoundary","Facet","SearchProvider","SearchBox","Results","PagingInfo","ResultsPerPage","Paging","Sorting","WithSearch","Layout","buildAutocompleteQueryConfig","buildFacetConfigFromConfig","buildSearchOptionsFromConfig","buildSortOptionsFromConfig","getConfig","getFacetFields","hostIdentifier","searchKey","endpointBase","engineName","connector","config","searchQuery","facets","autocompleteQuery","apiConnector","alwaysSearchOnInitialLoad","App","wasSearched","map","field","titleField","urlField"],"mappings":"kJAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,qBAAP,KAAkC,yCAAlC,CAEA,OACEC,aADF,CAEEC,KAFF,CAGEC,cAHF,CAIEC,SAJF,CAKEC,OALF,CAMEC,UANF,CAOEC,cAPF,CAQEC,MARF,CASEC,OATF,CAUEC,UAVF,KAWO,0BAXP,CAYA,OAASC,MAAT,KAAuB,gCAAvB,CACA,MAAO,sDAAP,CAEA,OACEC,4BADF,CAEEC,0BAFF,CAGEC,4BAHF,CAIEC,0BAJF,CAKEC,SALF,CAMEC,cANF,KAOO,wBAPP,C,iBASgED,SAAS,E,CAAjEE,c,YAAAA,c,CAAgBC,S,YAAAA,S,CAAWC,Y,YAAAA,Y,CAAcC,U,YAAAA,U,CACjD,KAAMC,CAAAA,SAAS,CAAG,GAAItB,CAAAA,qBAAJ,CAA0B,CAC1CmB,SAD0C,CAE1CE,UAF0C,CAG1CH,cAH0C,CAI1CE,YAJ0C,CAA1B,CAAlB,CAMA,KAAMG,CAAAA,MAAM,CAAG,CACbC,WAAW,gBACTC,MAAM,CAAEZ,0BAA0B,EADzB,EAENC,4BAA4B,EAFtB,CADE,CAKbY,iBAAiB,CAAEd,4BAA4B,EALlC,CAMbe,YAAY,CAAEL,SAND,CAObM,yBAAyB,CAAE,IAPd,CAAf,CAUA,cAAe,SAASC,CAAAA,GAAT,EAAe,CAC5B,mBACE,oBAAC,cAAD,EAAgB,MAAM,CAAEN,MAAxB,eACE,oBAAC,UAAD,EAAY,iBAAiB,CAAE,CAAC,CAAEO,WAAF,CAAD,IAAsB,CAAEA,WAAF,CAAtB,CAA/B,EACG,CAAC,CAAEA,WAAF,CAAD,GAAqB,CACpB,mBACE,2BAAK,SAAS,CAAC,KAAf,eACE,oBAAC,aAAD,mBACE,oBAAC,MAAD,EACE,MAAM,cAAE,oBAAC,SAAD,EAAW,uBAAuB,CAAE,IAApC,EADV,CAEE,WAAW,cACT,+BACGA,WAAW,eACV,oBAAC,OAAD,EACE,KAAK,CAAE,SADT,CAEE,WAAW,CAAEf,0BAA0B,EAFzC,EAFJ,CAOGE,cAAc,GAAGc,GAAjB,CAAqBC,KAAK,eACzB,oBAAC,KAAD,EAAO,GAAG,CAAEA,KAAZ,CAAmB,KAAK,CAAEA,KAA1B,CAAiC,KAAK,CAAEA,KAAxC,EADD,CAPH,CAHJ,CAeE,WAAW,cACT,oBAAC,OAAD,EACE,UAAU,CAAEhB,SAAS,GAAGiB,UAD1B,CAEE,QAAQ,CAAEjB,SAAS,GAAGkB,QAFxB,CAGE,uBAAuB,CAAE,IAH3B,EAhBJ,CAsBE,UAAU,cACR,oBAAC,KAAD,CAAO,QAAP,MACGJ,WAAW,eAAI,oBAAC,UAAD,MADlB,CAEGA,WAAW,eAAI,oBAAC,cAAD,MAFlB,CAvBJ,CA4BE,UAAU,cAAE,oBAAC,MAAD,MA5Bd,EADF,CADF,CADF,CAoCD,CAtCH,CADF,CADF,CA4CD","sourcesContent":["import React from \"react\";\n\nimport AppSearchAPIConnector from \"@elastic/search-ui-app-search-connector\";\n\nimport {\n  ErrorBoundary,\n  Facet,\n  SearchProvider,\n  SearchBox,\n  Results,\n  PagingInfo,\n  ResultsPerPage,\n  Paging,\n  Sorting,\n  WithSearch\n} from \"@elastic/react-search-ui\";\nimport { Layout } from \"@elastic/react-search-ui-views\";\nimport \"@elastic/react-search-ui-views/lib/styles/styles.css\";\n\nimport {\n  buildAutocompleteQueryConfig,\n  buildFacetConfigFromConfig,\n  buildSearchOptionsFromConfig,\n  buildSortOptionsFromConfig,\n  getConfig,\n  getFacetFields\n} from \"./config/config-helper\";\n\nconst { hostIdentifier, searchKey, endpointBase, engineName } = getConfig();\nconst connector = new AppSearchAPIConnector({\n  searchKey,\n  engineName,\n  hostIdentifier,\n  endpointBase\n});\nconst config = {\n  searchQuery: {\n    facets: buildFacetConfigFromConfig(),\n    ...buildSearchOptionsFromConfig()\n  },\n  autocompleteQuery: buildAutocompleteQueryConfig(),\n  apiConnector: connector,\n  alwaysSearchOnInitialLoad: true\n};\n\nexport default function App() {\n  return (\n    <SearchProvider config={config}>\n      <WithSearch mapContextToProps={({ wasSearched }) => ({ wasSearched })}>\n        {({ wasSearched }) => {\n          return (\n            <div className=\"App\">\n              <ErrorBoundary>\n                <Layout\n                  header={<SearchBox autocompleteSuggestions={true} />}\n                  sideContent={\n                    <div>\n                      {wasSearched && (\n                        <Sorting\n                          label={\"Sort by\"}\n                          sortOptions={buildSortOptionsFromConfig()}\n                        />\n                      )}\n                      {getFacetFields().map(field => (\n                        <Facet key={field} field={field} label={field} />\n                      ))}\n                    </div>\n                  }\n                  bodyContent={\n                    <Results\n                      titleField={getConfig().titleField}\n                      urlField={getConfig().urlField}\n                      shouldTrackClickThrough={true}\n                    />\n                  }\n                  bodyHeader={\n                    <React.Fragment>\n                      {wasSearched && <PagingInfo />}\n                      {wasSearched && <ResultsPerPage />}\n                    </React.Fragment>\n                  }\n                  bodyFooter={<Paging />}\n                />\n              </ErrorBoundary>\n            </div>\n          );\n        }}\n      </WithSearch>\n    </SearchProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}